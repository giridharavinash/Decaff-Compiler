class Program {int arr[1000000],temp[1000000]; void merge(int f1, int f2, int l1, int l2) {int i,j,top,idx,k; i = f1; j = l1; top = 0; for k = 0,((f2 - f1) + (l2 - l1) + 10) {if(i > f2 || j > l2) {break; } if(arr[i] < arr[j]) {temp[top] = arr[i]; top = top + 1; i = i + 1; } else {temp[top] = arr[j]; top = top + 1; j = j + 1; } } for k = 0, ((f2 - f1) + (l2 - l1) + 10) {if(i > f2) {break; } temp[top] = arr[i]; i = i + 1; top = top + 1; } for k = 0, ((f2 - f1) + (l2 - l1) + 10) {if(j > l2) {break; } temp[top] = arr[j]; j = j + 1; top = top + 1; } for i = 0,top {idx = f1 + i; arr[idx] = temp[i]; } return; } void mergesort(int first, int last) {int mid,val; if(first == last) {return; } mid = first + last; mid = mid / 2; val = mid + 1; mergesort(first, mid); mergesort(val, last); merge(first,mid,val,last); return; } int main(int aa) {int i,n,end; callout("scanf",n); end = n - 1; for i = 0,n {callout("scanf",arr[i]); } callout("printf","Printing List\n"); for i = 0,n {callout("printf",arr[i]); callout("printf"," "); } callout("printf", "\n"); mergesort(0, end); callout("printf","Printing after sorting\n"); for i = 0,n {callout("printf",arr[i]); callout("printf"," "); } callout("printf","\n"); return 0; } }